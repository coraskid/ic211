This Lab makes use of all of the key aspects of object oriented programming design. Encapsulation is seen in each class, where a new object (or additions on a parent class) and new methods are defined. Info Hiding is represented through the use of private, public, and protected. All public classes (ex: toString, and step) are those that have to be used in Lab06.java, as it is the implementation of all of the dot classes. All methods that need to be used in dot Child classes (ex: changeDir) are labeled as protected so that only the child classes can use those methods. Inheritance is displayed in the hierarchy from the Dot class, to MovingDot class, then to all of the various colored Dot classes. There are also various calls to super, connecting parent to child classes. Polymorphism is shown in Lab06.java whenever the add method is called. This method takes in MovingDots, yet in Lab06 we are able to add ColoredDots due to polymorphism. 

Polymorphism allows us to create slight variations on a single class but then treat all instances of those child classes as the parent class. More specifically, our MovingDot class is the parent class of all of the ColorDot classes. All ColorDot classes have all of the capabilities of a MovingDot instance, plus some extra implementation from overriding some of the MovingDot Methods and extra data fields. Even though all of the ColorDots have slightly different implementations, because of polymorphism, we can treat them all as a MovingDot. This is specifically related to the MovingDotList class and the Lab06 file. We are able to use the add method in the MovingDotList class with ColorDots even though that method specifically takes in MovingDots. It is also used when Lab06 iterates over all of the ColorDots but acts like they are MovingDots. 

Lab06.java - in main - in line 24, the print call ‘System.out.println(md);’. This line prints out the dot by calling its toString method. However, it is a polymorphic call site because you dont know which toString method will be called until run time. The method that is called is dependent on the class that is the lowest in the hierarchy and has a toString method. This means that depending on what color is currently being iterated (what is currently assigned to md), will determine what toString method will be called. Similarly, the next line, line 25, the step call ‘md.step();’ is also a polymorphic call site. Similar to the toString method example, a different step could be called depending on what the lowest class in the hierarchy md is currently assigned to that has a step method. 
